#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Jan 27 20:26:26 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.


# Set OBMC_PW environment variable to the root password for the BMC

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout -1
trap exit {SIGINT SIGTERM}
lassign $argv board_num if_whole_image
spawn ./build_and_deploy.sh $board_num $if_whole_image
match_max 100000
#expect -exact "Adding SSH key\r
## Host 10.228.214.53 found: line 53\r
#/home/scook/.ssh/known_hosts updated.\r
#Original contents retained as /home/scook/.ssh/known_hosts.old\r
#/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/scook/.ssh/id_rsa.pub\"\r
#/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\r
#/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\r
#Welcome to Cornelis Networks CN5000 Edge Switch Series CLI.\r
#\r"
expect "*@*.*.*.*'s password: "
send -- "$env(OBMC_PW)\r"
expect "Unable to perform a non-disruptive reboot. Do you still want to proceed? 'y' or 'n':"
send -- "y\n"
expect eof
#
